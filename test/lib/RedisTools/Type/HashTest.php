<?php

namespace RedisTools\Type;

/**
 * Test class for Hash.
 * Generated by PHPUnit on 2011-03-26 at 20:33:48.
 */
class HashTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Hash
	 */
	protected $object;

	protected $hashKey = 'hash1';

	protected $testKey = 'key';
	
	protected $testValue = 'value';

	

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$redis = new \Redis();
		$redis->pconnect('127.0.0.1');
		
		$this->object = new Hash($this->hashKey, $redis);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->object->delete();
	}
	
	public function testAddKeyValue()
	{
		$this->assertEquals(1,
			$this->object->set( 
				$this->testKey, 
				$this->testValue
			),
			'Failed to add a new key value pair to the hash. ' 
		);
	}
	
	
	
	public function testReplacingValueOfExistingKey()
	{
		$this->object->set( $this->testKey, $this->testValue );
		
		$this->assertEquals(0,
			$this->object->set( 
				$this->testKey, 
				'other value'
			),
			'Failed to reset the value of an existing key. ' 
		);
	}
	
	public function testAddingMultipleValues()
	{
		for($i=0; $i<10; $i++)
		{
			$this->assertEquals(1,
				$this->object->set($this->testKey.$i, $this->testValue.$i)
			);
		}
	}
	
	public function testGetValueOfNonExistingHash()
	{
		$this->assertFalse(
			$this->object->get($this->testKey),
			'Getting key of  non existing hash should return false. '
		);
	}
	
	public function testGetValueOfNonExistingKey()
	{
		$this->object->set($this->testKey, $this->testValue);
		
		$this->assertFalse(
			$this->object->get('somekey'),
			'Getting non existing key should return false. '
		);
	}
	
	public function testGetValueOfExistingKey()
	{
		$this->object->set($this->testKey, $this->testValue);
		
		$this->assertEquals($this->testValue,
			$this->object->get($this->testKey),
			'Getting key should have returned ' . $this->testValue . '. '
		);
	}
	
	public function testCountingValuesOnEmptyHash()
	{
		$this->assertEquals(0,
			$this->object->count(),
			'Nonexistent hash should count as 0 but did not. '
		);
		
		$this->assertEquals(0,
			count($this->object),
			'Nonexistent hash should SPL count as 0 but did not. '
		);
	}
	
	public function testSplCountDeliversSameResultAsCount()
	{
		$message = 'SPL count delivered different value than native count. ';
		$this->assertEquals($this->object->count(), count($this->object), $message);
		
		$this->insertValues(3);
		$this->assertEquals($this->object->count(), count($this->object), $message);
	}
	
	public function testCountingWithFilledHash()
	{
		$count = 10;
		$this->insertValues($count);
		
		$this->assertEquals(
			$count, 
			$this->object->count(), 
			"Should have counted $count values but did not. "
		);
	}
	
	public function testSetIfNotExistsOnEmpty()
	{
		$this->assertTrue(
			$this->object->setIfNotExists($this->testKey, $this->testValue),
			'Setting value should have worked because key is empty. '
		);
	}
	


	public function testDeletingKeyInNonExistingHash()
	{
		$this->assertFalse(
			$this->object->deleteKey($this->testKey)
		);
	}
	
	public function testDeletingNonExistingKey()
	{
		$this->object->set($this->testKey, $this->testValue);
		
		$this->assertFalse(
			$this->object->deleteKey( 'somekey' )
		);
	}

	public function testDeletingExistingValue()
	{
		$this->object->set($this->testKey, $this->testValue);
		
		$this->assertTrue(
			$this->object->deleteKey($this->testKey)
		);
	}
	
	public function testGetKeysOfNonExistingHash()
	{
		$keys = $this->object->getKeys();
		
		$this->assertType('array',
			$keys,
			'Fetching keys should deliver array. '
		);
		
		$this->assertEquals(0,
			count($keys),
			'Fetching keys should deliver empty array. '
		);
	}
	
	public function testGetKeysOfExistingHash()
	{
		$count = 5;
		$this->insertValues($count);
		
		$keys = $this->object->getKeys();
		
		$this->assertType('array',
			$keys,
			'Fetching keys should deliver array. '
		);
		
		$this->assertEquals($count,
			count($keys),
			'Fetching keys should deliver array with ' . $count . ' entries. '
		);
		
		for($i=0; $i<$count; $i++)
		{
			$this->assertEquals($this->testKey.$i, $keys[$i]);
		}
	}
	
	public function testGetValuesOfNonExistingHash()
	{
		$values = $this->object->getValues();
		
		$this->assertType('array', 
			$values,
			'Fetching values should return array. '
		);
		
		$this->assertEquals(0,
			count($values),
			'Fetching values should deliver empty array. '
		);
	}
	
	public function testGetValuesOfExistingHash()
	{
		$count = 5;
		$this->insertValues($count);
		
		$values = $this->object->getValues();
		
		$this->assertType('array',
			$values,
			'Fetching values should deliver array. '
		);
		
		$this->assertEquals($count,
			count($values),
			'Fetching values should deliver array with ' . $count . ' entries. '
		);
		
		for($i=0; $i<$count; $i++)
		{
			$this->assertEquals($this->testValue.$i, $values[$i]);
		}
	}
	
	public function testGetAllOfNonExistingHash()
	{
		$all = $this->object->getAll();
		
		$this->assertType('array',
			$all,
			'Fetching all values should return array. '
		);
		
		$this->assertEquals(0, count($all));
	}
	
	public function testGetAllOfExistingHash()
	{
		$count = 5;
		$this->insertValues($count);
		
		$all = $this->object->getAll();
		
		$this->assertType('array',
			$all,
			'Fetching all values should return array. '
		);
		
		$this->assertEquals($count, count($all),
			'Result should have ' . $count . ' entries. '
		);
		
		$this->assertArrayHasKey($this->testKey.'0', $all);
		$this->assertArrayHasKey($this->testKey.($count-1), $all);
		
		$this->assertEquals($this->testValue.'0', $all[$this->testKey.'0']);
		$this->assertEquals($this->testValue.'3', $all[$this->testKey.'3']);
	}

	public function testSetIfNotExistsOnExisting()
	{
		$this->object->set($this->testKey, $this->testValue);
		
		$this->assertFalse(
			$this->object->setIfNotExists($this->testKey, $this->testValue),
			'Setting value should not have worked because key is not empty. '
		);
	}
	
	public function testKeyExistsOnNonExistingHash()
	{
		$this->assertFalse(
			$this->object->keyExists( $this->testKey )
		);
	}
	
	public function testKeyExistsNonExistingKey()
	{
		$this->object->set($this->testKey, $this->testValue);
		
		$this->assertFalse(
			$this->object->keyExists( $this->testKey . 'other' )
		);
	}
	
	public function testKeyExistsExistingKey()
	{
		$this->object->set($this->testKey, $this->testValue);
		
		$this->assertTrue(
			$this->object->keyExists( $this->testKey )
		);
	}
	
	public function testIncrementValueOnNonExistingHash()
	{
		$this->assertEquals(1,
			$this->object->incrementValue( $this->testKey )
		);
		
		$this->assertTrue($this->object->exists( $this->testKey ));
	}

	public function testIncrementValueOnNonExistingKey()
	{
		$this->object->set('asdf', 'asdf');
		
		$this->assertEquals(1,
			$this->object->incrementValue( $this->testKey )
		);
		
		$this->assertTrue($this->object->exists( $this->testKey ));
	}
	
	public function testIncrementValueOnExistingKeyWithStringValue()
	{
		$this->object->set($this->testKey, $this->testValue);
		
		$this->assertFalse(
			$this->object->incrementValue( $this->testKey )
		);
	}
	
	public function testIncrementValueOnExistingKeyWithIntValue()
	{
		$this->object->set($this->testKey, 0);
		
		$this->assertEquals(1,
			$this->object->incrementValue( $this->testKey )
		);
		
		$this->assertEquals(4,
			$this->object->incrementValue( $this->testKey, 3 )
		);
		
		$this->assertEquals(4, $this->object->get($this->testKey));
	}
	
	public function testGetMultiWithEmptyKeysArray()
	{
		$this->assertFalse($this->object->getMulti( array() ));
		
		$this->insertValues(3);
		$this->assertFalse($this->object->getMulti( array() ));
	}
	
	public function testGetMultOnNonExistingHash()
	{
		$result = $this->object->getMulti( array('key1', 'key2' ) );
		$this->assertType('array', $result);
		
		$this->assertEquals(2, count($result));
		foreach($result as $value)
		{
			$this->assertFalse($value);
		}
	}
	
	public function testGetMultiWithExistingAndNonExistingKeys()
	{
		$this->insertValues(5);
		$result = $this->object->getMulti( array('key1', 'key3', 'key2', 'nonexisting') );
		
		$this->assertType('array', $result);
		$this->assertEquals(4, \count($result));
		
		$this->assertEquals('value1', $result['key1']);
		$this->assertEquals('value3', $result['key3']);
		$this->assertFalse($result['nonexisting']);
		
	}
	
	public function testSetMultiWithEmptyArray()
	{
		$this->assertFalse(
			$this->object->setMulti( array() )
		);
	}
	
	public function testSetMultiOnNonExistingHash()
	{
		$this->assertTrue(
			$this->object->setMulti( array('key1' => 'value1', 'key2' => 'value2') )
		);
		
		$this->assertEquals(2, $this->object->count());
		$result = $this->object->getAll();
		
		$this->assertArrayHasKey('key2', $result);
		$this->assertEquals('value1', $result['key1']);
	}

	protected function insertValues( $count )
	{
		for($i=0; $i<$count; $i++)
		{
			$this->object->set($this->testKey.$i, $this->testValue.$i);
		}
	}

}

?>
