<?php
namespace RedisTools\Type;
/**
 * Test class for Set.
 * Generated by PHPUnit on 2011-04-06 at 22:26:21.
 */
class SetTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Set
	 */
	protected $object;

	protected $testKey = 'key';


	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$redis = new \Redis();
		$redis->pconnect('127.0.0.1');
		
		$this->object = new Set($this->testKey, $redis);
	}

	
	
	
	
	
	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->object->delete();
	}

}
/*
 * 
--------------------------------------------------------
sAdd
--------------------------------------------------------

*Description*
Adds a value to the set value stored at key. If this value is already in the set, FALSE is returned.

*Parameters*
key value

*Return value*
BOOL TRUE if value didn't exist and was added successfully, FALSE if the value is already present.

*Example*
$redis->sAdd('key1' , 'set1');

 */

/*

--------------------------------------------------------
sRem, sRemove
--------------------------------------------------------

*Description*
Removes the specified member from the set value stored at key.

*Parameters*
key member

*Return value*
BOOL TRUE if the member was present in the set, FALSE if it didn't.

*Example*
$redis->sAdd('key1' , 'set1'); 
$redis->sAdd('key1' , 'set2'); 
$redis->sAdd('key1' , 'set3');  'key1' => {'set1', 'set2', 'set3'}
$redis->sRem('key1', 'set2');  'key1' => {'set1', 'set3'}
*/

/*
--------------------------------------------------------
sMove
--------------------------------------------------------

*Description*
Moves the specified member from the set at srcKey to the set at dstKey.

*Parameters*
srcKey dstKey member

*Return value*
BOOL If the operation is successful, return TRUE. If the srcKey and/or dstKey didn't exist, and/or the member didn't exist in srcKey, FALSE is returned.

*Example*
$redis->sAdd('key1' , 'set11'); 
$redis->sAdd('key1' , 'set12'); 
$redis->sAdd('key1' , 'set13');  'key1' => {'set11', 'set12', 'set13'}
$redis->sAdd('key2' , 'set21'); 
$redis->sAdd('key2' , 'set22');  'key2' => {'set21', 'set22'}
$redis->sMove('key1', 'key2', 'set13');  'key1' =>  {'set11', 'set12'}
                      'key2' =>  {'set21', 'set22', 'set13'}
*/

/*
--------------------------------------------------------
sIsMember, sContains
--------------------------------------------------------
*Description*
Checks if value is a member of the set stored at the key key.

*Parameters*
key value

*Return value*
BOOL TRUE if value is a member of the set at key key, FALSE otherwise.

*Example*
$redis->sAdd('key1' , 'set1'); 
$redis->sAdd('key1' , 'set2'); 
$redis->sAdd('key1' , 'set3'); /* 'key1' => {'set1', 'set2', 'set3'}

$redis->sIsMember('key1', 'set1'); /* TRUE
$redis->sIsMember('key1', 'setX'); /* FALSE 

*/

/*
--------------------------------------------------------
sCard, sSize
--------------------------------------------------------

*Description*
Returns the cardinality of the set identified by key.

*Parameters*
key

*Return value*
LONG the cardinality of the set identified by key, 0 if the set doesn't exist.

*Example*
$redis->sAdd('key1' , 'set1'); 
$redis->sAdd('key1' , 'set2'); 
$redis->sAdd('key1' , 'set3'); /* 'key1' => {'set1', 'set2', 'set3'}
$redis->sCard('key1'); /* 3 
$redis->sCard('keyX'); /* 0 
*/

/*
--------------------------------------------------------
sPop
--------------------------------------------------------

*Description*
Removes and returns a random element from the set value at Key.

*Parameters*
key

*Return value*
String "popped" value
Bool FALSE if set identified by key is empty or doesn't exist.

*Example*
$redis->sAdd('key1' , 'set1'); 
$redis->sAdd('key1' , 'set2'); 
$redis->sAdd('key1' , 'set3'); /* 'key1' => {'set3', 'set1', 'set2'}
$redis->sPop('key1'); /* 'set1', 'key1' => {'set3', 'set2'}
$redis->sPop('key1'); /* 'set3', 'key1' => {'set2'}

*/

/*
--------------------------------------------------------
sRandMember
--------------------------------------------------------

*Description*
Returns a random element from the set value at Key, without removing it.

*Parameters*
key

*Return value*
String value from the set
Bool FALSE if set identified by key is empty or doesn't exist.

*Example*
$redis->sAdd('key1' , 'set1'); 
$redis->sAdd('key1' , 'set2'); 
$redis->sAdd('key1' , 'set3'); /* 'key1' => {'set3', 'set1', 'set2'}
$redis->sRandMember('key1'); /* 'set1', 'key1' => {'set3', 'set1', 'set2'}
$redis->sRandMember('key1'); /* 'set3', 'key1' => {'set3', 'set1', 'set2'}

*/

/*
--------------------------------------------------------
sInter
--------------------------------------------------------
*Description*
Returns the members of a set resulting from the intersection of all the sets held at the specified keys. If just a single key is specified, then this command produces the members of this set. If one of the keys is missing, FALSE is returned.

*Parameters*
key1, key2, keyN: keys identifying the different sets on which we will apply the intersection.

*Return value*
Array, contain the result of the intersection between those keys. If the intersection beteen the different sets is empty, the return value will be empty array.

*Examples*
$redis->sAdd('key1', 'val1');
$redis->sAdd('key1', 'val2');
$redis->sAdd('key1', 'val3');
$redis->sAdd('key1', 'val4');

$redis->sAdd('key2', 'val3');
$redis->sAdd('key2', 'val4');

$redis->sAdd('key3', 'val3');
$redis->sAdd('key3', 'val4');

var_dump($redis->sInter('key1', 'key2', 'key3'));
Output:

array(2) {
  [0]=>
  string(4) "val4"
  [1]=>
  string(4) "val3"
}
*/

/*
--------------------------------------------------------
sInterStore
--------------------------------------------------------
*Description*
Performs a sInter command and stores the result in a new set.

*Parameters*
Key: dstkey, the key to store the diff into.

Keys: key1, key2... keyN. key1..keyN are intersected as in sInter.

*Return value*
INTEGER: The cardinality of the resulting set, or FALSE in case of a missing key.

*Example*
$redis->sAdd('key1', 'val1');
$redis->sAdd('key1', 'val2');
$redis->sAdd('key1', 'val3');
$redis->sAdd('key1', 'val4');

$redis->sAdd('key2', 'val3');
$redis->sAdd('key2', 'val4');

$redis->sAdd('key3', 'val3');
$redis->sAdd('key3', 'val4');

var_dump($redis->sInterStore('output', 'key1', 'key2', 'key3'));
var_dump($redis->sMembers('output'));
Output:

int(2)

array(2) {
  [0]=>
  string(4) "val4"
  [1]=>
  string(4) "val3"
}
*/

/*
--------------------------------------------------------
sUnion
--------------------------------------------------------
*Description*
Performs the union between N sets and returns it.

*Parameters*
Keys: key1, key2, ... , keyN: Any number of keys corresponding to sets in redis.

*Return value*
Array of strings: The union of all these sets.

*Example*
$redis->delete('s0', 's1', 's2');

$redis->sAdd('s0', '1');
$redis->sAdd('s0', '2');
$redis->sAdd('s1', '3');
$redis->sAdd('s1', '1');
$redis->sAdd('s2', '3');
$redis->sAdd('s2', '4');

var_dump($redis->sUnion('s0', 's1', 's2'));
Return value: all elements that are either in s0 or in s1 or in s2.
array(4) {
  [0]=>
  string(1) "3"
  [1]=>
  string(1) "4"
  [2]=>
  string(1) "1"
  [3]=>
  string(1) "2"
}
*/

/*
-------------------------------------------------------- 
sUnionStore
--------------------------------------------------------
*Description*
Performs the same action as sUnion, but stores the result in the first key

*Parameters*
Key: dstkey, the key to store the diff into.

Keys: key1, key2, ... , keyN: Any number of keys corresponding to sets in redis.

*Return value*
INTEGER: The cardinality of the resulting set, or FALSE in case of a missing key.

*Example*
$redis->delete('s0', 's1', 's2');

$redis->sAdd('s0', '1');
$redis->sAdd('s0', '2');
$redis->sAdd('s1', '3');
$redis->sAdd('s1', '1');
$redis->sAdd('s2', '3');
$redis->sAdd('s2', '4');

var_dump($redis->sUnionStore('dst', 's0', 's1', 's2'));
var_dump($redis->sMembers('dst'));
Return value: the number of elements that are either in s0 or in s1 or in s2.
int(4)
array(4) {
  [0]=>
  string(1) "3"
  [1]=>
  string(1) "4"
  [2]=>
  string(1) "1"
  [3]=>
  string(1) "2"
}
*/

/*
--------------------------------------------------------
sDiff
--------------------------------------------------------
*Description*
Performs the difference between N sets and returns it.

*Parameters*
Keys: key1, key2, ... , keyN: Any number of keys corresponding to sets in redis.

*Return value*
Array of strings: The difference of the first set will all the others.

*Example*
$redis->delete('s0', 's1', 's2');

$redis->sAdd('s0', '1');
$redis->sAdd('s0', '2');
$redis->sAdd('s0', '3');
$redis->sAdd('s0', '4');

$redis->sAdd('s1', '1');
$redis->sAdd('s2', '3');

var_dump($redis->sDiff('s0', 's1', 's2'));
Return value: all elements of s0 that are neither in s1 nor in s2.
array(2) {
  [0]=>
  string(1) "4"
  [1]=>
  string(1) "2"
}
*/

/*
--------------------------------------------------------
sDiffStore
--------------------------------------------------------
*Description*
Performs the same action as sDiff, but stores the result in the first key

*Parameters*
Key: dstkey, the key to store the diff into.

Keys: key1, key2, ... , keyN: Any number of keys corresponding to sets in redis

*Return value*
INTEGER: The cardinality of the resulting set, or FALSE in case of a missing key.

*Example*
$redis->delete('s0', 's1', 's2');

$redis->sAdd('s0', '1');
$redis->sAdd('s0', '2');
$redis->sAdd('s0', '3');
$redis->sAdd('s0', '4');

$redis->sAdd('s1', '1');
$redis->sAdd('s2', '3');

var_dump($redis->sDiffStore('dst', 's0', 's1', 's2'));
var_dump($redis->sMembers('dst'));
Return value: the number of elements of s0 that are neither in s1 nor in s2.
int(2)
array(2) {
  [0]=>
  string(1) "4"
  [1]=>
  string(1) "2"
}

*/

/*
--------------------------------------------------------
sMembers, sGetMembers
--------------------------------------------------------
*Description*
Returns the contents of a set.

*Parameters*
Key: key

*Return value*
An array of elements, the contents of the set.

*Example*
$redis->delete('s');
$redis->sAdd('s', 'a');
$redis->sAdd('s', 'b');
$redis->sAdd('s', 'a');
$redis->sAdd('s', 'c');
var_dump($redis->sMembers('s'));
Output:

array(3) {
  [0]=>
  string(1) "c"
  [1]=>
  string(1) "a"
  [2]=>
  string(1) "b"
}
The order is random and corresponds to redis' own internal representation of the set structure. ## getSet ##### *Description* Sets a value and returns the previous entry at that key. ##### *Parameters* *Key*: key *STRING*: value ##### *Return value* A string, the previous value located at this key. ##### *Example*
$redis->set('x', '42');
$exValue = $redis->getSet('x', 'lol');  // return '42', replaces x by 'lol'
$newValue = $redis->get('x')'       // return 'lol'
*/