<?php

namespace RedisTools\Type;

/**
 * Test class for Key.
 * Generated by PHPUnit on 2011-03-24 at 23:33:38.
 */
class KeyTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var Key
	 */
	protected $object;

	protected $testKey = 'testkey';

	protected $testValue = 'testvalue';

	protected $testTtl = 2;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$redis = new \Redis();
		$redis->pconnect('127.0.0.1');
		
		$this->object = new Key(
			$this->testKey, $redis
		);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->object->delete();
		$this->object = null;
	}
	
	public function testSettingValue()
	{
		$this->assertTrue(
			$this->object->setValue( $this->testValue ),
			'Value could not be written to Redis. '
		);
	}
	
	public function testSetValueWithExpires()
	{
		$this->assertTrue(
			$this->object->setValue( 
				$this->testValue,
				$this->testTtl
			),
			'Value with expires time could not be written to Redis. '
		);
		
		$ttl = $this->object->getTtl();
		$this->assertEquals(
			$this->testTtl, $ttl,
			'TTl should be '. $this->testTtl . ' but was ' . $ttl . '. '
		);
	}
	
	public function testSetNonExistingKey()
	{
		$this->assertTrue(
			$this->object->setValueIfNotExists( $this->testValue ),
			'Setting value on empty key was not successful. '
		);
		
		$this->assertEquals(
			$this->testValue, 
			$this->object->getValue(),
			'Value should have been set but was not. '
		);
	}

	public function testSetIfNotExistsWithExistingValue()
	{
		$this->object->setValue($this->testValue);
		
		$this->assertFalse(
			$this->object->setValueIfNotExists( 'some other' ),
			'Setting value should not be successful but was. '
		);
		
		$this->assertEquals(
			$this->testValue, 
			$this->object->getValue(),
			'Value has been changed but should not. '
		);
	}

	public function testSettingValueWithRedisError()
	{
		$redis = $this->getMock('Redis', array('setValue'));
		$key = new Key('asdf', $redis);
		$key->setValue('value');
		
	}
	
	public function testReadingValue()
	{
		$this->assertFalse(
			$this->object->getValue(), 
			'Key should have been empty but was not. '
		);
		
		$this->object->setValue($this->testValue);
		
		$this->assertEquals(
			$this->testValue, 
			$this->object->getValue(),
			'Wrong value read from a Redis key. '
		);
	}
	
}