<?php

namespace RedisTools\Type;

/**
 * Test class for OrderedList.
 * Generated by PHPUnit on 2011-04-02 at 21:27:11.
 */
class OrderedListTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var OrderedList
	 */
	protected $object;

	protected $testKey = 'key';
	
	protected function setUp()
	{
		$redis = new \Redis();
		$redis->pconnect('127.0.0.1');
		$this->object = new OrderedList( $this->testKey, $redis );
	}

	protected function tearDown()
	{
		$this->object->delete();
	}

	public function testCountOnEmptyKey()
	{
		$this->assertEquals(0,
			$this->object->count()
		);
		
		$this->assertEquals(0,
			count($this->object)
		);
		
	}
	
	public function testCount()
	{
		$this->object->addValue('a');
		
		$this->assertEquals(1,
			count($this->object)
		);
		
		$this->object->addValue('b');
		
		$this->assertEquals(2,
			count($this->object)
		);
	}

	public function testAddValue()
	{
		$this->assertEquals(1,
			$this->object->addValue('a')
		);
		
		$this->assertEquals(1,
			$this->object->addValue('b', 10)
		);
		
		$this->assertEquals(0,
			$this->object->addValue('a', 3)
		);
	}
	
	public function testGetOrderValueOnEmptyKey()
	{
		$this->assertFalse(
			$this->object->getOrderValue('a')
		);
	}
	
	public function testGetOrderValueOnNxValue()
	{
		$this->object->addValue('a');
		
		$this->assertFalse(
			$this->object->getOrderValue('b')
		);
	}
	
	public function testGetOrderValue()
	{
		$this->object->addValue('a', 5);
		
		$this->assertEquals(5,
			$this->object->getOrderValue('a')
		);
	}
	
	public function testIncrementOrderValueOnEmptyKey()
	{
		$this->assertEquals(1,
			$this->object->incrementOrderValue('a')
		);
		
		$this->assertEquals(1, 
			$this->object->getOrderValue('a')
		);
	}
	
	public function testIncrementOrderValue()
	{
		$this->assertEquals(1,
			$this->object->incrementOrderValue('a')
		);
		
		$this->assertEquals(1, 
			$this->object->getOrderValue('a')
		);
		
		$this->assertEquals(3,
			$this->object->incrementOrderValue('a', 2)
		);
		
		$this->assertEquals(3, 
			$this->object->getOrderValue('a')
		);
	}
	
	public function testDeleteValueOnEmptyKey()
	{
		$this->assertEquals(0,
			$this->object->deleteValue('a')
		);
	}
	
	public function testDeleteValue()
	{
		$this->object->addValue('a');
		$this->assertEquals(1,
			$this->object->deleteValue('a')
		);
		$this->assertEquals(0,
			$this->object->deleteValue('a')
		);
		
		$this->assertEquals(0,
			count($this->object)
		);
	}
	
	public function testGetValuesOnEmptyKey()
	{
		$result = $this->object->getValues();
		$this->assertInternalType('array', $result);
		$this->assertEquals(0, count($result));
	}
	
	public function testGetValuesAscDesc()
	{
		$this->setupList();
		$result = $this->object->getValues();
		$this->assertEquals('a', $result[0]);
		$this->assertEquals('b', $result[1]);
		$this->assertEquals('c', $result[2]);
		$this->assertEquals('d', $result[3]);
		
		$result = $this->object->getValues(0, 0, \RedisTools::ASC);
		$this->assertEquals('a', $result[3]);
		$this->assertEquals('b', $result[2]);
		$this->assertEquals('c', $result[1]);
		$this->assertEquals('d', $result[0]);
	}
	
	public function testGetValuesWithLimitOffset()
	{
		$this->setupList();
		$result = $this->object->getValues(2, 0);
		$this->assertEquals(2, count($result));
		$this->assertEquals('a', $result[0]);
		$this->assertEquals('b', $result[1]);
		
		$result = $this->object->getValues(3, 1);
		$this->assertEquals(3, count($result));
		$this->assertEquals('b', $result[0]);
		$this->assertEquals('c', $result[1]);
		
		$result = $this->object->getValues(10, 3);
		$this->assertEquals(1, count($result));
		$this->assertEquals('d', $result[0]);
	}
	
	public function testGetValuesWithScores()
	{
		$this->setupList();
		$result = $this->object->getValues(0, 0, \RedisTools::DESC, true);
		
		$this->assertEquals(4, $result['a']);
		$this->assertEquals(3, $result['b']);
		$this->assertEquals(2, $result['c']);
		$this->assertEquals(1, $result['d']);
	}

	public function testIteratorInterface()
	{
		$expected = array( 
			'a' => 4,
			'b' => 3,
			'c' => 2,
			'd' => 1
		);
		$this->setupList();
		
		foreach($this->object as $key => $value)
		{
			$this->assertEquals($expected[$key], $value);
		}
	}
	
	protected function setupList()
	{
		$this->object->addValue('a', 4);
		$this->object->addValue('b', 3);
		$this->object->addValue('c', 2);
		$this->object->addValue('d', 1);
	}
	
}

?>
