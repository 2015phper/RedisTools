<?php
namespace RedisTools\Db;
/**
 * Test class for ValueObject.
 * Generated by PHPUnit on 2011-04-21 at 23:12:55.
 */
class ValueObjectTest extends \PHPUnit_Framework_TestCase
{

	/**
	 * @var ValueObjectDummy
	 */
	protected $object;

	/**
	 * @var \Redis
	 */
	protected $redis;

	protected $testKey = 'testkey';

	protected function setUp()
	{
		$this->redis = new \Redis();
		$this->redis->pconnect('127.0.0.1');
		
		$this->object = new ValueObjectDummy();
		$this->object->setKey($this->testKey);
		$this->object->setRedis($this->redis);
	}
	
	protected function tearDown()
	{
		$this->redis->delete($this->testKey);
		parent::tearDown();
	}

	public function testGetReflector()
	{
		$this->assertType('\RedisTools\Utils\Reflection', $this->object->getReflector());
	}

	public function testSetReflector()
	{
		$object = new \stdClass();
		$this->object->setReflector($object);
		$this->assertEquals($object, $this->object->getReflector());
	}
	
	public function testHasSimpleValueProperty()
	{
		$this->assertType('\RedisTools\Db\Field\SimpleValue',
			$this->object->simpleValue
		);
	}
	
	public function testHasUniqueIdentifierProperty()
	{
		$this->assertType('\RedisTools\Db\Field\UniqueIdentifier',
			$this->object->uniqueIdentifier
		);
	}
	
	public function testSetGetRedisPropertySimpleValue()
	{
		$value = 'asdf';
		$this->object->set('simpleValue', $value);
		$this->assertEquals($value, $this->object->get('simpleValue'));
	}
	
	/**
	 * @expectedException \RedisTools\Exception
	 */
	public function testSetNonexistingRedisProperty()
	{
		$this->object->set('nonExisting', 'asdf');
	}
	
	/**
	 * @expectedException \RedisTools\Exception
	 */
	public function testGetNonexistingRedisProperty()
	{
		$this->object->get('nonExisting', 'asdf');
	}
	
	public function testSetGetNormalProperty()
	{
		$this->object->set('nonRedisProperty', 'asdf');
		$this->assertEquals('asdf', $this->object->get('nonRedisProperty'));
	}
	
	public function testIsPersistentOnUnsaved()
	{
		$this->assertFalse($this->object->isPersistent());
	}
	
	public function testIsPersistentOnObjectWithNoKey()
	{
		$object = new ValueObjectDummy();
		$this->assertFalse($object->isPersistent());
	}
	
	public function testIsSavedOnObjectWithNoKey()
	{
		$object = new ValueObjectDummy();
		$this->assertFalse($object->isSaved());
	}
	
	public function testIsSavedOnUnsaved()
	{
		$this->assertFalse($this->object->isSaved());
	}
	
	public function testSaveWithNoValuesSet()
	{
		$this->object->save();
		$this->assertTrue($this->object->isSaved());
	}
	
	public function testSaveWithOneValue()
	{
		$this->object->set('simpleValue', 'value');
		$this->assertFalse($this->object->isSaved());
		$this->object->save();
		$this->assertTrue($this->object->isSaved());
		
		$this->assertEquals('value', $this->object->get('simpleValue'));
		
		$valueObject = new ValueObjectDummy($this->testKey, $this->redis);
		
		$this->assertEquals(
			$this->object->get('simpleValue'), 
			$valueObject->get('simpleValue')
		);
		
		$valueObject->set('simpleValue', 'newvalue');
		$valueObject->save();
		
		$this->assertNotEquals(
			$this->object->get('simpleValue'), 
			$valueObject->get('simpleValue')
		);
		
		$this->object->setKey($this->testKey . 'other');
		$this->object->setKey($this->testKey);
		
		$this->assertEquals(
			$this->object->get('simpleValue'), 
			$valueObject->get('simpleValue')
		);
	}
	
	
}

?>